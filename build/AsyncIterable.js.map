{"version":3,"sources":["../src/AsyncIterable.js"],"names":["IterationError","errorObj","AsyncIterableBase","asyncFunc","array","forEach","item","push","transformFunc","MapAsyncIterable","filterFunc","FilterAsyncIterable","maxItems","TakeAsyncIterable","Symbol","asyncIterator","Error","undefined","brkObj","AsyncIteratorBase","AsyncIterable","innerIterable","queueSize","_innerIterable","_queueSize","streamFactory","StreamIterator","QueuedAsyncIterator","AsyncIterator","length","size","asyncIterable","next","_queue","pop","value","empty","done","_start","iterable","_asyncIterable","close","console","error","maxSize","sleepPeriodMs","_innerIterator","iterator","innerAsyncIterable","_innerAsyncIterable","_maxItems","TakeAsyncIterator","innerSize","Math","min","_nextIndex","_iterable","_innerAsyncIterator","_transformFunc","MapAsyncIterator","_filterFunc","FilterAsyncIterator","StreamIterable","queueConfig","_streamFactory","_queueConfig","_stream","on","pause","resume","errMsg","errToken","toString","err","errStr","castVal"],"mappings":"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","file":"AsyncIterable.js","sourcesContent":["//@flow\r\n\r\nimport 'babel-polyfill'\r\n\r\nimport Queue from './Queue'\r\nimport { asyncIterableForEach } from './asyncUtils'\r\n\r\n/***************************************/\r\n\r\nexport interface IAsyncIterable<TDest> {\r\n  forEach(asyncFunc: (item: TDest, i: number, brkObj: Symbol) => Promise<Symbol>): Promise<void>;\r\n\r\n  toArray(): Promise<Array<TDest>>;\r\n\r\n  map<C>(transformFunc: (item: TDest) => C): MapAsyncIterable<TDest, C>;\r\n\r\n  filter(filterFunc: (item: TDest) => boolean): FilterAsyncIterable<TDest>;\r\n\r\n  take(maxItems: number): TakeAsyncIterable<TDest>;\r\n\r\n  //[Symbol.asyncIterator](): AsyncIteratorBase<TDest>;\r\n\r\n  size: ?number;  \r\n}\r\n\r\n/***************************************/\r\n\r\nclass IterationError {\r\n  errorObj: any\r\n\r\n  constructor(errorObj: any) {\r\n    this.errorObj = errorObj\r\n  }\r\n}\r\n\r\n/***************************************/\r\n\r\nexport class AsyncIterableBase<TDest> {\r\n  static brkObj = Symbol('brkObj')\r\n\r\n  async forEach<S>(asyncFunc: (item: TDest, i: number, brkObj: Symbol) => ?Symbol | Promise<?Symbol>): Promise<void> {\r\n    await asyncIterableForEach(this, asyncFunc)\r\n  }\r\n\r\n  async toArray(): Promise<Array<TDest>> {\r\n    let array: Array<TDest> = []\r\n    await this.forEach(async (item) => { array.push(item) })    \r\n    return array\r\n  }\r\n\r\n  get size(): ?number {\r\n    return undefined\r\n  }\r\n\r\n  map<C>(transformFunc: (item: TDest) => C): MapAsyncIterable<C, TDest> {\r\n    return new MapAsyncIterable(this, transformFunc)\r\n  }\r\n\r\n  filter(filterFunc: (item: TDest) => boolean): FilterAsyncIterable<TDest> {\r\n    return new FilterAsyncIterable(this, filterFunc)\r\n  }\r\n\r\n  take(maxItems: number): TakeAsyncIterable<TDest> {\r\n    return new TakeAsyncIterable(this, maxItems)\r\n  }\r\n\r\n  // $FlowIgnore\r\n  [Symbol.asyncIterator](): AsyncIteratorBase<TDest> {\r\n    throw new Error('This function must be overridden by derived classes')\r\n  }\r\n}\r\n\r\nexport class AsyncIteratorBase<TDest> {\r\n  async next(): Promise<{ done: false, value: TDest } | { done: true }> {\r\n    throw new Error('This function must be overridden by derived classes')\r\n  }\r\n}\r\n\r\n/***************************************/\r\n\r\nexport default class AsyncIterable<TDest> extends AsyncIterableBase<TDest> {\r\n  _innerIterable: Iterable<TDest> | () => stream$Stream\r\n  _queueSize: number\r\n\r\n  static from<TDest>(innerIterable: Iterable<TDest> | () => stream$Stream, queueSize: number = 0): AsyncIterable<TDest> {\r\n    return new AsyncIterable(innerIterable, queueSize)\r\n  }\r\n\r\n  constructor(innerIterable: Iterable<TDest> | () => stream$Stream, queueSize: number = 0) {\r\n    super()\r\n    this._innerIterable = innerIterable\r\n    this._queueSize = queueSize\r\n  }\r\n\r\n  get size(): ?number {\r\n    // $FlowIgnore\r\n    return typeof this._innerIterable.length === 'undefined' ? this._innerIterable.size : this._innerIterable.length // if _innerIterable is not a list, undefined will be returned\r\n  }\r\n\r\n  // $FlowIgnore\r\n  [Symbol.asyncIterator](): AsyncIteratorBase<TDest> {\r\n    if (typeof this._innerIterable === 'function') {\r\n      let streamFactory: () => stream$Stream = (this._innerIterable: any)\r\n      return new StreamIterator(streamFactory)\r\n    }\r\n    return this._queueSize ? new QueuedAsyncIterator(this) : new AsyncIterator(this)\r\n  }\r\n}\r\n\r\nclass QueuedAsyncIterator<TDest> extends AsyncIteratorBase<TDest> {\r\n  _asyncIterable: AsyncIterable<TDest>\r\n  _queue: Queue<TDest>\r\n\r\n  constructor(asyncIterable: AsyncIterable<TDest>) {\r\n    super()\r\n    this._asyncIterable = asyncIterable\r\n    this._queue = new Queue({ maxSize: this._asyncIterable._queueSize, sleepPeriodMs: 50 })\r\n    this._start()\r\n  }\r\n\r\n  next = async (): Promise<{ done: true } | { done: false, value: TDest }> => {\r\n    while (true) {\r\n      let value = await this._queue.pop()\r\n      if (value === (Queue.empty: Symbol))\r\n        return { done: true }\r\n      return { done: false, value: value }\r\n    }\r\n  }\r\n\r\n  _start = async () => {\r\n    try {\r\n      let iterable: Iterable<TDest> = this._asyncIterable._innerIterable\r\n      for (let value of iterable) {\r\n        await this._queue.push(value)\r\n      }\r\n      this._queue.close()\r\n    } catch(err) {\r\n      console.error(`Error during processing QueuedAsyncIterator items`, err) \r\n    }\r\n  }\r\n}\r\n\r\nclass AsyncIterator<TDest> extends AsyncIteratorBase<TDest> {\r\n  _asyncIterable: AsyncIterable<TDest>\r\n  _innerIterator: Iterator<TDest>\r\n\r\n  constructor(asyncIterable: AsyncIterable<TDest>) {\r\n    super()\r\n    this._asyncIterable = asyncIterable\r\n    // $FlowIgnore\r\n    this._innerIterator = this._asyncIterable._innerIterable[Symbol.iterator]()\r\n  }\r\n\r\n  next = async (): Promise<{ done: true } | { done: false, value: TDest }> => {\r\n    let next = this._innerIterator.next()\r\n    if (next.done)\r\n      return { done: true }\r\n    return { done: false, value: next.value }\r\n  }\r\n}\r\n\r\n/***************************************/\r\n\r\nclass TakeAsyncIterable<TDest> extends AsyncIterableBase<TDest> {\r\n  _innerAsyncIterable: AsyncIterableBase<TDest>\r\n  _maxItems: number\r\n\r\n  constructor(innerAsyncIterable: AsyncIterableBase<TDest>, maxItems: number) {\r\n    super()\r\n    this._innerAsyncIterable = innerAsyncIterable\r\n    this._maxItems = maxItems\r\n  }\r\n\r\n  // $FlowIgnore\r\n  [Symbol.asyncIterator](): TakeAsyncIterator<TDest> {\r\n    return new TakeAsyncIterator(this)\r\n  }\r\n\r\n  get size(): ?number {\r\n    let innerSize = this._innerAsyncIterable.size\r\n    if (innerSize != undefined) {\r\n      return Math.min(innerSize, this._maxItems)\r\n    }\r\n  }\r\n}\r\n\r\nclass TakeAsyncIterator<TDest> extends AsyncIteratorBase<TDest> {\r\n  _iterable: TakeAsyncIterable<TDest>\r\n  _innerAsyncIterator: AsyncIteratorBase<TDest>\r\n  _maxItems: number\r\n  _nextIndex = 0\r\n\r\n  constructor(iterable: TakeAsyncIterable<TDest>) {\r\n    super()\r\n    this._iterable = iterable\r\n    // $FlowIgnore\r\n    this._innerAsyncIterator = this._iterable._innerAsyncIterable[Symbol.asyncIterator]()\r\n  }\r\n\r\n  async next(): Promise<{ done: false, value: TDest } | { done: true }> {\r\n    if (this._nextIndex >= this._iterable._maxItems)\r\n      return { done: true }\r\n    this._nextIndex++\r\n    return await this._innerAsyncIterator.next()\r\n  }\r\n}\r\n\r\n/***************************************/\r\n\r\nclass MapAsyncIterable<TDest, TOrigin> extends AsyncIterableBase<TDest> {\r\n  _innerAsyncIterable: AsyncIterableBase<TOrigin>\r\n  _transformFunc: (item: TOrigin) => TDest\r\n\r\n  constructor(innerAsyncIterable: AsyncIterableBase<TOrigin>, transformFunc: (item: TOrigin) => TDest) {\r\n    super()\r\n    this._innerAsyncIterable = innerAsyncIterable\r\n    this._transformFunc = transformFunc\r\n  }\r\n\r\n  // $FlowIgnore\r\n  [Symbol.asyncIterator](): MapAsyncIterator<TDest> {\r\n    return new MapAsyncIterator(this)\r\n  }\r\n\r\n  get size(): ?number {\r\n    return this._innerAsyncIterable.size\r\n  }\r\n}\r\n\r\nclass MapAsyncIterator<TDest, TOrigin> extends AsyncIteratorBase<TDest> {\r\n  _iterable: MapAsyncIterable<TDest, TOrigin>\r\n  _innerAsyncIterator: AsyncIteratorBase<TOrigin>\r\n  _maxItems: number\r\n  _nextIndex = 0\r\n\r\n  constructor(iterable: MapAsyncIterable<TDest, TOrigin>) {\r\n    super()\r\n    this._iterable = iterable\r\n    // $FlowIgnore\r\n    this._innerAsyncIterator = this._iterable._innerAsyncIterable[Symbol.asyncIterator]()\r\n  }\r\n\r\n  async next(): Promise<{ done: false, value: TDest } | { done: true }> {\r\n    let item = await this._innerAsyncIterator.next()\r\n    if (item.done === true)\r\n      return { done: true }\r\n    let value = await this._iterable._transformFunc(item.value)\r\n    return { value: value, done: false }\r\n  }\r\n}\r\n\r\n/***************************************/\r\n\r\nclass FilterAsyncIterable<TDest> extends AsyncIterableBase<TDest> {\r\n  _innerAsyncIterable: AsyncIterableBase<TDest>\r\n  _filterFunc: (item: TDest) => boolean\r\n\r\n  constructor(innerAsyncIterable: AsyncIterableBase<TDest>, filterFunc: (item: TDest) => boolean) {\r\n    super()\r\n    this._innerAsyncIterable = innerAsyncIterable\r\n    this._filterFunc = filterFunc\r\n  }\r\n\r\n  // $FlowIgnore\r\n  [Symbol.asyncIterator](): FilterAsyncIterator<TDest> {\r\n    return new FilterAsyncIterator(this)\r\n  }\r\n}\r\n\r\nclass FilterAsyncIterator<TDest> extends AsyncIteratorBase<TDest> {\r\n  _iterable: FilterAsyncIterable<TDest>\r\n  _innerAsyncIterator: AsyncIteratorBase<TDest>\r\n  _maxItems: number\r\n  _nextIndex = 0\r\n\r\n  constructor(iterable: FilterAsyncIterable<TDest>) {\r\n    super()\r\n    this._iterable = iterable\r\n    // $FlowIgnore\r\n    this._innerAsyncIterator = this._iterable._innerAsyncIterable[Symbol.asyncIterator]()\r\n  }\r\n\r\n  async next(): Promise<{ done: false, value: TDest } | { done: true }> {\r\n    let item: { done: false, value: TDest } | { done: true } = { done: true }\r\n    while (true) {\r\n      item = await this._innerAsyncIterator.next()\r\n      if (item.done === true)\r\n        break\r\n      if (await this._iterable._filterFunc(item.value))\r\n        break\r\n    }\r\n    return item\r\n  }\r\n}\r\n\r\n/***************************************/\r\n\r\nexport class StreamIterable<TDest> extends AsyncIterableBase<TDest> {\r\n  _streamFactory: () => stream$Stream\r\n  _queueConfig: Object\r\n\r\n  constructor(streamFactory: () => stream$Stream, queueConfig: Object) {\r\n    super()\r\n    this._streamFactory = streamFactory\r\n    this._queueConfig = queueConfig\r\n  }\r\n\r\n  // $FlowIgnore\r\n  [Symbol.asyncIterator]() {\r\n    return new StreamIterator(this._streamFactory(), this._queueConfig)\r\n  }\r\n}\r\n\r\nclass StreamIterator<TDest> extends AsyncIteratorBase<TDest> {\r\n  _queue: Queue<TDest>\r\n  _stream: stream$Stream\r\n\r\n  constructor(streamFactory: () => stream$Stream, queueConfig: Object = { maxSize: 10000 }) {\r\n    super()\r\n    this._queue = new Queue(queueConfig)\r\n    this._stream = streamFactory()\r\n    \r\n    //let stat = startStat('steram item')\r\n    this._stream.on('data', async (item: TDest) => {\r\n      try {\r\n        this._stream.pause()\r\n        await this._queue.push(item)\r\n        this._stream.resume()\r\n        //stat.inc()\r\n      } catch (err) {\r\n        let errMsg = `Error during handling StreamIterator stream data`\r\n        console.error(errMsg, err)\r\n        let errToken: TDest = ((new IterationError(`${errMsg}: ${err.toString()}`): any): TDest)\r\n        this._queue.push(errToken)\r\n      }\r\n    })\r\n    this._stream.on('end', () => {\r\n      try {\r\n        this._queue.close()\r\n        //stat.end()\r\n      } catch (err) {\r\n        console.error(`Error during handling StreamIterator stream end`, err) \r\n      }\r\n    })\r\n    this._stream.on('error', async (errStr) => {\r\n      try {\r\n        await this._queue.push(new IterationError(errStr))\r\n        this._queue.close()\r\n        //stat.end()\r\n      } catch (err) {\r\n        console.error(`Error during handling StreamIterator stream error`, err) \r\n      }\r\n    })\r\n  }\r\n\r\n  async next(): Promise<{ done: false, value: TDest } | { done: true }> {\r\n    let value: TDest = await this._queue.pop()\r\n    let castVal = (value: any)\r\n    if (castVal instanceof IterationError) {\r\n      throw castVal.errorObj instanceof Error ? castVal.errorObj : new Error(castVal.errorObj)\r\n    }\r\n    if (castVal === Queue.empty) {\r\n      return { done: true }\r\n    }\r\n    return { value: value, done: false }\r\n  }\r\n}\r\n"]}