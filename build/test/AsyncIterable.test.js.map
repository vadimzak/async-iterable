{"version":3,"sources":["../../src/test/AsyncIterable.test.js"],"names":["describe","it","ai","from","Set","values","toArray","res","to","eql","s","push","map","buf","toString","forEach","n","i","brkObj","size","undefined","filter","take"],"mappings":"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","file":"AsyncIterable.test.js","sourcesContent":["// @flow\r\n\r\nimport \"babel-polyfill\"\r\nimport { Readable } from 'stream'\r\nimport axios from 'axios'\r\n//import fs from 'fs'\r\n\r\nimport AsyncIterable from '../AsyncIterable'\r\nimport { sleep } from '../asyncUtils'\r\nimport { expect } from 'chai'\r\n\r\n// mocha flow type declarations\r\ndeclare function describe(name: string, spec: () => void): void\r\ndeclare function it(name: string, spec: Function): void\r\n\r\ndescribe('AsyncIterable', () => {\r\n\r\n  describe('#from() (static)', () => {\r\n    it('creates an AsyncIterable from an Iterable', async () => {\r\n      let ai = AsyncIterable.from(new Set([1, 2, 3]).values())\r\n      let res = await ai.toArray()\r\n      expect(res).to.eql([1, 2, 3])\r\n    })\r\n\r\n    it('creates an AsyncIterable from an Array', async () => {\r\n      let ai = AsyncIterable.from([1, 2, 3])\r\n      let res = await ai.toArray()\r\n      expect(res).to.eql([1, 2, 3])\r\n    })\r\n\r\n    it('creates an AsyncIterable from an Stream', async () => {\r\n      let s = new Readable()\r\n      s.push(\"1\")\r\n      s.push(\"2\")\r\n      s.push(null)\r\n\r\n      //let s = fs.createReadStream('package.json')\r\n\r\n      let ai = AsyncIterable.from(() => s)\r\n      let res = await ai.toArray()\r\n      expect(res.map(buf => buf.toString())).to.eql([\"1\", \"2\"])\r\n    })\r\n  })\r\n\r\n  it('#toArray() returns correct results', async () => {\r\n    let ai = new AsyncIterable([1,2,3])\r\n    let res = await ai.toArray()\r\n    expect(res).to.eql([1,2,3])\r\n  })\r\n\r\n  describe('Queued', () => {\r\n    it('#toArray() returns correct results', async () => {\r\n      let ai = new AsyncIterable(new Set([1, 2, 3]).values())\r\n      let res = await ai.toArray()\r\n      expect(res).to.eql([1, 2, 3])\r\n    }, 1)\r\n  })\r\n\r\n  describe('#forEach()', () => {\r\n\r\n    it('is called on all items', async () => {\r\n      let ai = new AsyncIterable([1, 2, 3])\r\n      let res = []\r\n      await ai.forEach((n) => {\r\n        res.push(n)\r\n      })\r\n      expect(res).to.eql([1, 2, 3])\r\n    })\r\n\r\n    it('stoppes when brkObj is returned', async () => {\r\n      let ai = new AsyncIterable([1, 2, 3])\r\n      let res = []\r\n      await ai.forEach((n, i, brkObj) => {\r\n        res.push(n)\r\n        return brkObj\r\n      })\r\n      expect(res).to.eql([1])\r\n    })\r\n\r\n  })\r\n\r\n  describe('#size', () => {\r\n\r\n    it('returns size on Array', async () => {\r\n      let ai = new AsyncIterable([1, 2, 3])\r\n      let res = ai.size\r\n      expect(res).to.eql(3)\r\n    })\r\n\r\n    it('returns undefined size on Iterable', async () => {\r\n      let ai = new AsyncIterable(new Set([1, 2, 3]).values())\r\n      let res = ai.size\r\n      expect(res).to.eql(undefined)\r\n    })\r\n\r\n  })\r\n\r\n  it('#map() returns mapped results', async () => {\r\n    let ai = new AsyncIterable([1,2,3])\r\n    let res = await ai\r\n      .map((n) => n.toString())\r\n      .toArray()\r\n    expect(res).to.eql(['1', '2', '3'])\r\n  })\r\n\r\n  it('#filter() returns filtered results', async () => {\r\n    let ai = new AsyncIterable([1,2,3])\r\n    let res = await ai\r\n      .filter((n) => n % 2 === 0)\r\n      .toArray()\r\n    expect(res).to.eql([2])\r\n  })\r\n\r\n  describe('#take()', () => {\r\n\r\n    it('returns less results', async () => {\r\n      let ai = new AsyncIterable([1, 2, 3])\r\n      let res = await ai\r\n        .take(2)\r\n        .toArray()\r\n      expect(res).to.eql([1, 2])\r\n    })\r\n\r\n    it('#take().size returns correct size on Array', async () => {\r\n      let ai = new AsyncIterable([1, 2, 3])\r\n      let res = await ai\r\n        .take(2)\r\n        .size\r\n      expect(res).to.eql(2)\r\n    })\r\n\r\n    it('#take().size returns undefiend size on Iterable', async () => {\r\n      let ai = new AsyncIterable(new Set([1, 2, 3]).values())\r\n      let res = await ai\r\n        .take(2)\r\n        .size\r\n      expect(res).to.eql(undefined)\r\n    })  \r\n\r\n  })\r\n  \r\n})"]}