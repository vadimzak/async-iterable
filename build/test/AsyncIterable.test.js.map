{"version":3,"sources":["../../src/test/AsyncIterable.test.js"],"names":["describe","it","ai","Set","values","n","toArray","res","to","eql","forEach","push","i","brkObj","size","undefined","map","toString","filter","take"],"mappings":"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","file":"AsyncIterable.test.js","sourcesContent":["// @flow\r\n\r\nimport \"babel-polyfill\"\r\nimport AsyncIterable from '../AsyncIterable'\r\nimport { sleep } from '../asyncUtils'\r\nimport { expect } from 'chai'\r\n\r\n// mocha flow type declarations\r\ndeclare function describe(name: string, spec: () => void): void\r\ndeclare function it(name: string, spec: Function): void\r\n\r\ndescribe('AsyncIterable', () => {\r\n\r\n  describe('Queued', () => {\r\n    it('#toArray() returns correct results', async () => {\r\n      let ai = new AsyncIterable((new Set([1, 2, 3]).values()), async (n) => {\r\n        await sleep(n)\r\n        return n\r\n      })\r\n      let res = await ai.toArray()\r\n      expect(res).to.eql([1, 2, 3])\r\n    }, 1)\r\n  })\r\n\r\n  it('#toArray() returns correct results', async () => {\r\n    let ai = new AsyncIterable([1,2,3], async (n) => {\r\n      await sleep(n)\r\n      return n\r\n    })\r\n    let res = await ai.toArray()\r\n    expect(res).to.eql([1,2,3])\r\n  })\r\n\r\n  describe('#forEach()', () => {\r\n\r\n    it('is called on all items', async () => {\r\n      let ai = new AsyncIterable([1, 2, 3], async (n) => {\r\n        await sleep(n)\r\n        return n\r\n      })\r\n      let res = []\r\n      await ai.forEach((n) => {\r\n        res.push(n)\r\n      })\r\n      expect(res).to.eql([1, 2, 3])\r\n    })\r\n\r\n    it('stoppes when brkObj is returned', async () => {\r\n      let ai = new AsyncIterable([1, 2, 3], async (n) => {\r\n        await sleep(n)\r\n        return n\r\n      })\r\n      let res = []\r\n      await ai.forEach((n, i, brkObj) => {\r\n        res.push(n)\r\n        return brkObj\r\n      })\r\n      expect(res).to.eql([1])\r\n    })\r\n\r\n  })\r\n\r\n  describe('#size()', () => {\r\n\r\n    it('returns size on Array', async () => {\r\n      let ai = new AsyncIterable([1, 2, 3], async (n) => {\r\n        await sleep(n)\r\n        return n\r\n      })\r\n      let res = ai.size()\r\n      expect(res).to.eql(3)\r\n    })\r\n\r\n    it('returns undefined size on Iterable', async () => {\r\n      let ai = new AsyncIterable((new Set([1, 2, 3]).values()), async (n) => {\r\n        await sleep(n)\r\n        return n\r\n      })\r\n      let res = ai.size()\r\n      expect(res).to.eql(undefined)\r\n    })\r\n\r\n  })\r\n\r\n  it('#map() returns mapped results', async () => {\r\n    let ai = new AsyncIterable([1,2,3], async (n) => {\r\n      await sleep(n)\r\n      return n\r\n    })\r\n    let res = await ai\r\n      .map((n) => n.toString())\r\n      .toArray()\r\n    expect(res).to.eql(['1', '2', '3'])\r\n  })\r\n\r\n  it('#filter() returns filtered results', async () => {\r\n    let ai = new AsyncIterable([1,2,3], async (n) => {\r\n      await sleep(n)\r\n      return n\r\n    })\r\n    let res = await ai\r\n      .filter((n) => n % 2 === 0)\r\n      .toArray()\r\n    expect(res).to.eql([2])\r\n  })\r\n\r\n  describe('#take()', () => {\r\n\r\n    it('returns less results', async () => {\r\n      let ai = new AsyncIterable([1, 2, 3], async (n) => {\r\n        await sleep(n)\r\n        return n\r\n      })\r\n      let res = await ai\r\n        .take(2)\r\n        .toArray()\r\n      expect(res).to.eql([1, 2])\r\n    })\r\n\r\n    it('#take().size() returns correct size on Array', async () => {\r\n      let ai = new AsyncIterable([1, 2, 3], async (n) => {\r\n        await sleep(n)\r\n        return n\r\n      })\r\n      let res = await ai\r\n        .take(2)\r\n        .size()\r\n      expect(res).to.eql(2)\r\n    })\r\n\r\n    it('#take().size() returns undefiend size on Iterable', async () => {\r\n      let ai = new AsyncIterable((new Set([1, 2, 3]).values()), async (n) => {\r\n        await sleep(n)\r\n        return n\r\n      })\r\n      let res = await ai\r\n        .take(2)\r\n        .size()\r\n      expect(res).to.eql(undefined)\r\n    })  \r\n\r\n  })\r\n})"]}