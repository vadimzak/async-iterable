{"version":3,"sources":["../src/Queue.js"],"names":["DEFAULT_MAX_QUEUE_SIZE","DEFAULT_SLEEP_PERIOD_MS","Queue","config","items","blockingCount","closed","push","newItem","maxSize","length","sleepPeriodMs","pop","empty","shift","close","isBlocking","getLength","Symbol"],"mappings":";;;;;;AAEA;;AAEA;;;;;;AAEA,IAAMA,yBAAyB,CAAC,CAAhC;AACA,IAAMC,0BAA0B,CAAhC;;IAEqBC,K,GAQnB,iBAAiC;AAAA;;AAAA,MAArBC,MAAqB,uEAAJ,EAAI;;AAAA;;AAAA,OANjCC,KAMiC,GANf,EAMe;AAAA,OALjCC,aAKiC,GALjB,CAKiB;AAAA,OAJjCC,MAIiC,GAJxB,KAIwB;;AAAA,OAUjCC,IAViC;AAAA,yDAU1B,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE,MAAKL,MAAL,CAAYM,OAAZ,GAAsB,CAAtB,IAA2B,MAAKL,KAAL,CAAWM,MAAX,IAAqB,MAAKP,MAAL,CAAYM,OAF9D;AAAA;AAAA;AAAA;;AAGH,oBAAKJ,aAAL;AAHG;AAAA,qBAIG,uBAAM,MAAKF,MAAL,CAAYQ,aAAlB,CAJH;;AAAA;AAKH,oBAAKN,aAAL;AALG;AAAA;;AAAA;;AAQL,oBAAKD,KAAL,CAAWG,IAAX,CAAgBC,OAAhB;;AARK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAV0B;;AAAA;AAAA;AAAA;AAAA;;AAAA,OAqBjCI,GArBiC,6CAqB3B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEG,MAAKR,KAAL,CAAWM,MAAX,KAAsB,CAFzB;AAAA;AAAA;AAAA;;AAAA,iBAGE,MAAKJ,MAHP;AAAA;AAAA;AAAA;;AAAA,8CAISJ,MAAMW,KAJf;;AAAA;AAMF,kBAAKR,aAAL;AANE;AAAA,mBAOI,uBAAM,MAAKF,MAAL,CAAYQ,aAAlB,CAPJ;;AAAA;AAQF,kBAAKN,aAAL;AARE;AAAA;;AAAA;AAAA,8CAWG,MAAKD,KAAL,CAAWU,KAAX,EAXH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GArB2B;AAAA,OAmCjCC,KAnCiC,6CAmCzB;AAAA;AAAA;AAAA;AAAA;AACN,kBAAKT,MAAL,GAAc,IAAd;;AADM;AAAA,kBAEC,MAAKF,KAAL,CAAWM,MAAX,GAAoB,CAFrB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGE,uBAAM,MAAKP,MAAL,CAAYQ,aAAlB,CAHF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAnCyB;;AAAA,OA0CjCK,UA1CiC,GA0CpB,YAAM;AACjB,WAAO,MAAKX,aAAL,GAAqB,CAA5B;AACD,GA5CgC;;AAAA,OA8CjCY,SA9CiC,GA8CrB,YAAM;AAChB,WAAO,MAAKb,KAAL,CAAWM,MAAlB;AACD,GAhDgC;;AAC/B,OAAKP,MAAL,GAAcA,MAAd;AACA,OAAKA,MAAL,CAAYM,OAAZ,GAAsB,KAAKN,MAAL,CAAYM,OAAZ,IAAuBT,sBAA7C;AACA,OAAKG,MAAL,CAAYQ,aAAZ,GAA4B,KAAKR,MAAL,CAAYQ,aAAZ,IAA6BV,uBAAzD;;AAEA,OAAKG,KAAL,GAAa,EAAb;AACA,OAAKC,aAAL,GAAqB,CAArB;AACA,OAAKC,MAAL,GAAc,KAAd;AACD,C;;AAhBkBJ,K,CAMZW,K,GAAQK,OAAO,OAAP,C;kBANIhB,K","file":"Queue.js","sourcesContent":["//@flow\r\n\r\nimport 'babel-polyfill'\r\n\r\nimport { sleep } from './asyncUtils'\r\n\r\nconst DEFAULT_MAX_QUEUE_SIZE = -1\r\nconst DEFAULT_SLEEP_PERIOD_MS = 0\r\n\r\nexport default class Queue<T> {\r\n  config: Object\r\n  items: Array<T> = []\r\n  blockingCount = 0\r\n  closed = false\r\n\r\n  static empty = Symbol('empty')\r\n\r\n  constructor(config: Object = {}) {\r\n    this.config = config\r\n    this.config.maxSize = this.config.maxSize || DEFAULT_MAX_QUEUE_SIZE\r\n    this.config.sleepPeriodMs = this.config.sleepPeriodMs || DEFAULT_SLEEP_PERIOD_MS\r\n\r\n    this.items = []\r\n    this.blockingCount = 0\r\n    this.closed = false\r\n  }\r\n\r\n  push = async (newItem: T) => {\r\n    // wait if queue is full\r\n    while (this.config.maxSize > 0 && this.items.length >= this.config.maxSize) {\r\n      this.blockingCount++\r\n      await sleep(this.config.sleepPeriodMs)\r\n      this.blockingCount--\r\n    }\r\n\r\n    this.items.push(newItem)\r\n  }\r\n\r\n  pop = async (): Promise<T> => {\r\n    // wait if queue is empty\r\n    while (this.items.length === 0) {\r\n      if (this.closed) {\r\n        return ((Queue.empty: any): T)\r\n      }\r\n      this.blockingCount++\r\n      await sleep(this.config.sleepPeriodMs)\r\n      this.blockingCount--\r\n    }\r\n\r\n    return this.items.shift()\r\n  }\r\n\r\n  close = async () => {\r\n    this.closed = true\r\n    while (this.items.length > 0) {\r\n      await sleep(this.config.sleepPeriodMs)\r\n    }\r\n  }\r\n\r\n  isBlocking = () => {\r\n    return this.blockingCount > 0\r\n  }\r\n\r\n  getLength = () => {\r\n    return this.items.length\r\n  }\r\n}\r\n"]}